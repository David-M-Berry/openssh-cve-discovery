import nmap
import logging
import socket
from datetime import datetime
import ipaddress
import argparse
import csv
import re

# Configure logging
logging.basicConfig(filename='ssh_scan.log', level=logging.INFO, 
                    format='%(asctime)s - %(levelname)s - %(message)s')

def is_vulnerable(version):
    """Check if the OpenSSH version is vulnerable to the defined flaws."""
    version_pattern = r"(\d+)\.(\d+)(p\d+)?"
    match = re.match(version_pattern, version)
    if not match:
        return "Unknown"

    major = int(match.group(1))
    minor = int(match.group(2))
    patch = match.group(3)
    if patch:
        patch = int(patch[1:])
    else:
        patch = 0

    # Check for regreSSHion flaw
    if (8, 5) <= (major, minor) < (9, 8):
        return "Vulnerable to regreSSHion"

    # Check for CVE-2024-6387
    if (4, 4) <= (major, minor) < (8, 5):
        return "Not vulnerable to CVE-2024-6387"

    # Check older versions
    if (major, minor) < (4, 4):
        return "Vulnerable unless patched for CVE-2006-5051 and CVE-2008-4109"

    return "Not vulnerable"

def scan_network_chunk(network_chunk, timeout):
    nm = nmap.PortScanner()
    try:
        # Use nmap's version detection feature to scan all ports
        nm.scan(hosts=network_chunk, arguments='-sV', timeout=timeout)
        return nm
    except nmap.PortScannerError as e:
        logging.error(f"Nmap error: {e}")
        print(f"Nmap error: {e}")
        return None
    except Exception as e:
        logging.error(f"Unexpected error: {e}")
        print(f"Unexpected error: {e}")
        return None

def process_scan_results(nm, csv_writer):
    for host in nm.all_hosts():
        try:
            hostname = socket.gethostbyaddr(host)[0]
        except socket.herror:
            hostname = host

        for proto in nm[host].all_protocols():
            for port in nm[host][proto].keys():
                service_info = nm[host][proto][port]
                if service_info['name'] == 'ssh':
                    ssh_version = f"{service_info.get('product', 'Unknown')} {service_info.get('version', 'Unknown')}"
                    vulnerability_status = is_vulnerable(service_info.get('version', 'Unknown'))
                    # Log the hostname and SSH version
                    logging.info(f"Host: {hostname}, Port: {port}, OpenSSH Version: {ssh_version}, Vulnerability: {vulnerability_status}")
                    print(f"Host: {hostname}, Port: {port}, OpenSSH Version: {ssh_version}, Vulnerability: {vulnerability_status}")
                    # Write to CSV
                    csv_writer.writerow([hostname, host, ssh_version, vulnerability_status])

def scan_network(network, chunk_size=10, timeout=300):
    network_hosts = [str(ip) for ip in ipaddress.IPv4Network(network, strict=False).hosts()]
    total_hosts = len(network_hosts)
    print(f"Total hosts to scan: {total_hosts}")

    # Open CSV file for writing
    with open('ssh_scan_report.csv', mode='w', newline='') as csvfile:
        csv_writer = csv.writer(csvfile)
        csv_writer.writerow(['Hostname', 'IP Address', 'OpenSSH Version', 'Vulnerability Status'])

        for i in range(0, total_hosts, chunk_size):
            chunk = network_hosts[i:i + chunk_size]
            network_chunk = ' '.join(chunk)
            nm = scan_network_chunk(network_chunk, timeout)
            if nm:
                process_scan_results(nm, csv_writer)

if __name__ == "__main__":
    # Set up argument parsing
    parser = argparse.ArgumentParser(description='Scan a network for SSH services.')
    parser.add_argument('--cidr', required=True, help='CIDR notation of the network to scan, e.g., 192.168.0.0/24')
    args = parser.parse_args()

    # Perform the scan
    start_time = datetime.now()
    print(f"Scanning started at: {start_time}")
    scan_network(args.cidr, chunk_size=10, timeout=300)
    end_time = datetime.now()
    print(f"Scanning completed at: {end_time}")
    print(f"Duration: {end_time - start_time}")

